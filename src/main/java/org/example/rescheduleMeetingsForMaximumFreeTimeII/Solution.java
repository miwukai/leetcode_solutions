package org.example.rescheduleMeetingsForMaximumFreeTimeII;

import java.util.*;
import java.util.stream.Collectors;

public class Solution {
    public int maxFreeTime(int eventTime, int[] startTime, int[] endTime) {

        int maxLength = startTime.length;

        int[] freetime = new int[maxLength];

        int[] meetingTime = new int[maxLength];

        Map<Integer, Set<Integer>> gapIndex = new HashMap<>();

        for (int i = 0; i < maxLength; i++) {
            freetime[i] = (i == (maxLength - 1) ? eventTime : startTime[i + 1]) - ((i == 0) ? 0 : endTime[i - 1]);

            int gaptime = i == 0 ? startTime[i] : startTime[i] - endTime[i - 1];

            if (gapIndex.containsKey(gaptime)) {
                gapIndex.get(gaptime).add(i);
            } else {
                Set<Integer> set = new HashSet<>();
                set.add(i);
                gapIndex.put(gaptime, set);
            }

            meetingTime[i] = endTime[i] - startTime[i];
        }

        int gaptime = eventTime - endTime[maxLength - 1];

        if (gapIndex.containsKey(gaptime)) {
            gapIndex.get(gaptime).add(maxLength);
        } else {
            Set<Integer> set = new HashSet<>();
            set.add(maxLength);
            gapIndex.put(gaptime, set);
        }

        int result = 0;

        List<Integer> gapTimeList = gapIndex.keySet().stream().sorted(new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o2 - o1;
            }
        }).collect(Collectors.toList());

        for (int i = 0; i < maxLength; i++) {
            if (freetime[i] > result) {
                result = Math.max(result, freetime[i] - meetingTime[i]);
                for (int gapTime : gapTimeList) {
                    if (gapTime >= meetingTime[i]) {
                        Set<Integer> s = gapIndex.get(gapTime);
                        if (s != null) {
                            if (s.size() > 2) {
                                result = freetime[i];
                            } else if (s.size() == 2) {
                                if (s.contains(i) && s.contains(i + 1)) {
                                    result = Math.max(result, freetime[i] - meetingTime[i]);
                                } else {
                                    result = freetime[i];
                                }
                            } else if (s.size() == 1) {
                                if (s.contains(i) || s.contains(i + 1)) {
                                    result = Math.max(result, freetime[i] - meetingTime[i]);
                                } else {
                                    result = freetime[i];
                                }
                            }
                        }
                    } else {
                        break;
                    }
                }
            }
        }
        return result;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int eventTime = 102119350;
        int[] startTime = {4037, 8269, 12875, 19937, 77164, 83305, 85229, 90045, 90349, 106736, 117373, 117709, 117769, 117791, 117792, 117796, 117805, 118121, 118145, 118202, 118346, 118614, 118630, 118637, 118680, 119087, 235806, 239267, 239912, 239981, 239988, 240486, 241138, 241139, 241146, 241208, 246022, 246195, 291590, 298253, 298377, 312595, 443022, 526504, 533051, 534027, 537023, 543566, 545166, 555517, 566430, 569157, 569507, 570635, 571115, 571138, 11034974, 11071943, 11111778, 11124786, 11253968, 11278838, 13997923, 14108051, 14186402, 14245413, 14677894, 14927668, 14965191, 14971424, 15265246, 15265565, 15266836, 15266994, 15267172, 15971240, 16127285, 16193570, 16430719, 16435637, 16722774, 17166206, 21550129, 21550299, 21550942, 21551021, 21554546, 21554956, 21555084, 21555094, 21555214, 21559006, 21559561, 21560169, 21562732, 21563982, 21564006, 21564010, 21564011, 21564384, 21564542, 21564549, 21564577, 21564663, 21565437, 21565441, 21565445, 21565447, 21604101, 21604389, 21609304, 21614123, 21621350, 21621952, 21622001, 21622031, 21622070, 21622939, 21622940, 21622941, 21622942, 21623005, 21626713, 21627086, 21627116, 21627784, 21628173, 21638476, 21638731, 23764637, 23765238, 23765259, 23765265, 23765267, 23765486, 23765489, 23765534, 23765542, 23765544, 23768836, 23771492, 23826390, 23832759, 23834340, 23834378, 23834459, 23876288, 23882172, 23883332, 23948379, 23949235, 23949324, 23949325, 23949330, 23949452, 23949468, 23949469, 23949475, 23949505, 23950367, 23951039, 23951057, 23951125, 23951157, 23955397, 23960946, 23961319, 23961358, 23962218, 23962418, 23962420, 23962421, 24902805, 24911667, 24911928, 24913172, 24913414, 24914531, 24918216, 24919527, 24921792, 24954412, 24999924, 25000232, 25000239, 25000259, 25000298, 25075834, 25081938, 25097905, 25104003, 25104059, 25104126, 25104436, 25171740, 25177371, 25178273, 25185728, 25189703, 25189964, 25223597, 25223824, 25223854, 25223857, 25223867, 25223868, 25224091, 25224120, 25224121, 25224123, 25224124, 25224132, 25224155, 25239414, 25240826, 25241905, 29296375, 29298286, 29390695, 29728546, 29733190, 32386720, 34860299, 35631671, 35633150, 35633491, 35633505, 35633509, 35653041, 35682558, 35683450, 35686184, 35686409, 35686440, 35906109, 35908045, 35909249, 35909666, 35910098, 35910673, 35910817, 35911332, 35923705, 35923734, 35923796, 35923844, 35923898, 35924134, 35924151, 35924185, 35924188, 35924257, 35924258, 35971754, 35972288, 35972377, 35975146, 35978864, 35979923, 35979925, 35979962, 35982456, 35986182, 35986481, 35988891, 35988942, 35989116, 36229013, 36239498, 36493319, 36493437, 36493473, 36493571, 36493690, 36494059, 36494061, 36494082, 36494238, 36494239, 36494261, 36494267, 36494331, 36515222, 36519020, 36519742, 36521749, 36521864, 36530404, 36530447, 36530518, 36530554, 36530565, 36920781, 36948238, 36988251, 36990612, 36990640, 36995090, 36996849, 36996935, 37007600, 37016357, 37017429, 37035088, 37049611, 37051448, 37051452, 37051454, 37051455, 37051464, 37053232, 37053272, 37053276, 37055297, 37055426, 46012952, 46368243, 46828490, 54660534, 58098988, 79938836, 95714265, 96415119, 97703819, 99174643, 99199412, 99323078, 99323313, 99323945, 99448070, 99451473, 99460481, 99460832, 99460974, 99461027, 99461178, 99506548, 99530900, 99537662, 99551951, 99552118, 99552120, 99552129, 99552180, 99552192, 99554430, 100099600, 100109178, 100109460, 100109598, 100109790, 100112101, 100114517, 100647856, 100648832, 100655314, 100669185, 100670214, 100671292, 100672612, 100673094, 100759677, 100760792, 100760884, 101423418, 101424569, 101424628, 101424680, 101424690, 101424709, 101424711, 101424713, 101425976, 101426011, 101426023, 101426024, 101426031, 101433527, 101433554, 101433557, 101433561, 101444690, 101444696, 101444698, 101444701, 101444702, 101444703, 101444704, 101444745, 101444746, 101444757, 101444758, 101444780, 101444781, 101444782, 101444783, 101444784, 101444785, 101444804, 101496212, 101496324, 101496359, 101496506, 101496521, 101496546, 101496563, 101496578, 101496579, 101496992, 101540830, 101541630, 101541693, 101544913, 101545513, 101545531, 101545538, 101545539, 101545542, 101545566, 101545698, 101545705, 101545706, 101545874, 101545891, 101545893, 101545900, 101545902, 101545903, 101546058, 101546091, 101547583, 101547622, 101547634, 101547664, 101547669, 101547820, 101547845, 101598174, 101669240, 101713445, 101962460, 102003370, 102003463, 102015387, 102015391, 102015392, 102015394, 102015398, 102015824, 102015825, 102015889, 102015944, 102015988, 102015994, 102016040, 102016045, 102016047, 102016057, 102016063, 102016069, 102016091, 102016143, 102016156, 102016178, 102016180, 102016182, 102016259, 102016260, 102016268, 102071431, 102071614, 102071637, 102072148, 102072248, 102072439, 102072892, 102076447, 102076601, 102076745, 102076747, 102076754, 102076759, 102080833, 102081043, 102081069, 102081113, 102085917, 102086418, 102086421, 102086614, 102097278, 102097464, 102097538, 102097611, 102097612, 102097619, 102097624, 102097625, 102098928, 102103565};
        int[] endTime = {5029, 8777, 17304, 70380, 81498, 84167, 90027, 90249, 106612, 109046, 117530, 117744, 117791, 117792, 117793, 117801, 118091, 118134, 118153, 118345, 118559, 118615, 118633, 118652, 119042, 235458, 235899, 239691, 239978, 239982, 240222, 241136, 241139, 241146, 241149, 245335, 246045, 253611, 296680, 298258, 304863, 359315, 468708, 532746, 533930, 535378, 542962, 544754, 548489, 560559, 567429, 569325, 570471, 571108, 571134, 11017519, 11049067, 11081854, 11118627, 11160639, 11261413, 13931325, 14062216, 14136232, 14198882, 14526003, 14778282, 14939624, 14970517, 15254092, 15265408, 15266528, 15266857, 15267055, 15911055, 16042620, 16180716, 16340340, 16431710, 16675865, 16723115, 21550117, 21550179, 21550733, 21550943, 21554254, 21554862, 21554961, 21555085, 21555214, 21558870, 21559077, 21559860, 21561630, 21563586, 21563991, 21564009, 21564011, 21564219, 21564485, 21564545, 21564572, 21564607, 21565436, 21565440, 21565445, 21565447, 21598402, 21604130, 21606434, 21610661, 21620021, 21621553, 21621978, 21622020, 21622043, 21622930, 21622940, 21622941, 21622942, 21622986, 21623543, 21626851, 21627092, 21627647, 21628126, 21637815, 21638573, 23757043, 23765206, 23765252, 23765265, 23765267, 23765479, 23765488, 23765527, 23765541, 23765544, 23768173, 23770455, 23819800, 23826882, 23833323, 23834356, 23834397, 23871296, 23879445, 23882228, 23947324, 23948731, 23949324, 23949325, 23949330, 23949422, 23949468, 23949469, 23949475, 23949480, 23950265, 23951036, 23951047, 23951060, 23951145, 23955361, 23960780, 23961180, 23961334, 23961998, 23962416, 23962420, 23962421, 24884126, 24910344, 24911706, 24912940, 24913414, 24913907, 24917566, 24918509, 24919872, 24948527, 24971689, 25000178, 25000235, 25000245, 25000277, 25064503, 25078364, 25093411, 25103783, 25104040, 25104106, 25104300, 25150936, 25173923, 25177570, 25184518, 25189117, 25189777, 25223576, 25223774, 25223847, 25223855, 25223866, 25223868, 25224074, 25224120, 25224121, 25224123, 25224124, 25224128, 25224138, 25237317, 25239897, 25241040, 29265209, 29297480, 29320196, 29572662, 29729119, 30114698, 33500936, 35629039, 35632362, 35633490, 35633497, 35633509, 35640892, 35669731, 35683439, 35684748, 35686404, 35686417, 35899382, 35907048, 35908163, 35909335, 35909705, 35910661, 35910678, 35911206, 35923701, 35923730, 35923761, 35923799, 35923872, 35924128, 35924148, 35924180, 35924188, 35924250, 35924258, 35969753, 35972105, 35972357, 35974936, 35977829, 35979912, 35979925, 35979960, 35981598, 35985549, 35986252, 35988718, 35988912, 35988959, 36217943, 36230289, 36493317, 36493363, 36493466, 36493553, 36493598, 36493989, 36494061, 36494073, 36494235, 36494239, 36494249, 36494264, 36494281, 36513143, 36518347, 36519323, 36521730, 36521790, 36530234, 36530441, 36530493, 36530546, 36530558, 36859409, 36944593, 36986019, 36990132, 36990638, 36991243, 36995657, 36996897, 37007252, 37016329, 37016655, 37018424, 37036188, 37051428, 37051451, 37051453, 37051455, 37051458, 37053101, 37053238, 37053276, 37055196, 37055334, 40209308, 46289438, 46789110, 54353339, 54965618, 75852496, 82947220, 95972723, 97640199, 99173353, 99189681, 99322968, 99323217, 99323739, 99445333, 99449773, 99454593, 99460663, 99460917, 99461020, 99461157, 99500178, 99529616, 99534317, 99551405, 99552118, 99552119, 99552121, 99552169, 99552192, 99553590, 100081373, 100109089, 100109195, 100109520, 100109713, 100110513, 100113181, 100641425, 100648389, 100650627, 100666668, 100669476, 100670734, 100672594, 100672972, 100726805, 100760680, 100760832, 101421205, 101424392, 101424611, 101424674, 101424687, 101424709, 101424711, 101424713, 101425976, 101425997, 101426022, 101426024, 101426026, 101430320, 101433552, 101433556, 101433559, 101444684, 101444694, 101444698, 101444701, 101444702, 101444703, 101444704, 101444744, 101444746, 101444749, 101444758, 101444778, 101444781, 101444782, 101444783, 101444784, 101444785, 101444790, 101495883, 101496283, 101496347, 101496485, 101496520, 101496524, 101496555, 101496574, 101496579, 101496796, 101540633, 101541571, 101541662, 101543257, 101545348, 101545531, 101545538, 101545539, 101545541, 101545561, 101545684, 101545699, 101545706, 101545868, 101545885, 101545892, 101545899, 101545902, 101545903, 101546000, 101546090, 101547579, 101547593, 101547631, 101547664, 101547667, 101547691, 101547833, 101574916, 101614672, 101709330, 101867824, 101972425, 102003451, 102015387, 102015391, 102015392, 102015394, 102015396, 102015824, 102015825, 102015874, 102015891, 102015968, 102015994, 102016038, 102016042, 102016047, 102016050, 102016062, 102016066, 102016081, 102016109, 102016155, 102016178, 102016179, 102016182, 102016259, 102016260, 102016265, 102070207, 102071543, 102071615, 102071967, 102072223, 102072286, 102072735, 102076390, 102076576, 102076653, 102076747, 102076748, 102076758, 102079244, 102081005, 102081060, 102081113, 102084153, 102086408, 102086419, 102086530, 102090602, 102097385, 102097468, 102097611, 102097612, 102097619, 102097621, 102097625, 102098808, 102100714, 102113370};
        int result = solution.maxFreeTime(eventTime, startTime, endTime);
        System.out.println("Maximum free time: " + result); // Expected output: Maximum free time: 2
    }
}
